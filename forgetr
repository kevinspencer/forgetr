#!/usr/bin/env perl
# Copyright 2019 Kevin Spencer <kevin@kevinspencer.org>
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation. No representations are made about the suitability of this
# software for any purpose. It is provided "as is" without express or
# implied warranty.
#
################################################################################

use Data::Dumper;
use File::HomeDir;
use File::Spec;
use IO::Prompt;
use Try::Tiny;
use Twitter::API;
use Twitter::API::Util 'is_twitter_api_error';
use strict;
use warnings;

our $VERSION = '0.3';
$Data::Dumper::Indent = 1;

my $twitter_user = shift || 'kevin_spencer';
my $tokens_file = File::Spec->catfile(File::HomeDir->my_home(), '.forgetr.tokens');

#
# consumer_key and consumer_secret are provided by twitter on app registration.
# twitter uses these to identify the app in question.  not ideal to hardcode
# these here but no real choice thanks to the odd implementation of OAuth by twitter.
# see:
#
# http://arstechnica.com/security/2010/09/twitter-a-case-study-on-how-to-do-oauth-wrong/
#

my $consumer_key    = 'iXzcdUG8kVN0AswhxTheu602r';
my $consumer_secret = 'SEaxg9uawhdV25J2NPfwQg4q3cSG5knAb8amGzrIvh21rWoVsW';

my $client = Twitter::API->new_with_traits(
    traits              => [ qw/Migration ApiMethods RetryOnError/ ],
    consumer_key        => $consumer_key,
    consumer_secret     => $consumer_secret,
);

#
# access_token and access_token_secret are given on a per-user basis by twitter
# once the user has authorized forgetr access to their account.  if we've been
# authorized before, there should be access tokens on disk...
#
my($access_token, $access_token_secret) = retrieve_tokens();
if (! ($access_token && $access_token_secret)) {
    ($access_token, $access_token_secret) = get_twitter_authorization();
}

$client->access_token($access_token);
$client->access_token_secret($access_token_secret);

try {
    my $r = $client->verify_credentials;
} catch {
    die $_ unless is_twitter_api_error($_);
 
    print $_->http_request->as_string;
    print $_->http_response->as_string;
    print 'No use retrying right away' if $_->is_permanent_error;
    if ( $_->is_token_error ) {
        print "There's something wrong with this token."
    }
    print $_->twitter_error_code;
};

#
# https://dev.twitter.com/docs/working-with-timelines
#
# on first attempt, ask twitter for first 50 tweets...
# and from there, all subsequent attempts send max_id
# with every request to get next 50 tweets
#
my $max_id = 0;
my $args = { screen_name => $twitter_user, count => 50 };
try {
    while(1) {
        $args->{max_id} = ($max_id - 1) if $max_id;
        my $tweets = $client->user_timeline($args);
        last if (! @$tweets);
        for my $tweet (@$tweets) {
            print Dumper $tweet;
            exit();
            $max_id = $tweet->{id};
        }
    }
} catch {
    die "Twitter error: " . $_ . "\n";
};

sub get_twitter_authorization {
    my $request = $client->oauth_request_token();

    my $auth_url = $client->oauth_authorization_url({ oauth_token => $request->{oauth_token} });

    print "Visit the following URL in your browser to authorize this app:\n" .
        $client->oauth_authorization_url( { oauth_token => $request->{oauth_token} } ) . "\n";

    my $pin = prompt("Once done, enter the PIN here: ");

    try {
        print "PIN received, contacting twitter to obtain access tokens...\n";
        my $access = $client->oauth_access_token({
            token        => $request->{oauth_token},
            token_secret => $request->{oauth_token_secret},
            verifier     => $pin
        });

        my ($access_token, $access_token_secret) = @{$access}{qw(oauth_token oauth_token_secret)};

        if ($access_token && $access_token_secret) {
            print "Tokens received, storing to $tokens_file...\n";
            store_tokens($access_token, $access_token_secret);
            print "Done.\n";
            return ($access_token, $access_token_secret);
        } else {
            print "Twitter error: did not receive access tokens.\n";
            return;
        }
    } catch {
        die $_ unless is_twitter_api_error($_);

        print $_->http_request->as_string;
        print $_->http_response->as_string;
        print $_->twitter_error_code;
    }
}

sub retrieve_tokens {
    if (-e $tokens_file) {
        open(my $fh, '<', $tokens_file) ||
            die "Could not read $tokens_file - $!\n";
        my $a_token = <$fh>;
        chomp($a_token);
        my $a_secret = <$fh>;
        chomp($a_secret);
        close($fh);
        return ($a_token, $a_secret);
    }
    return;
}

sub store_tokens {
    my ($a_token, $a_token_secret) = @_;

    open(my $fh, '>', $tokens_file) ||
        die "Could not create $tokens_file - $!\n";
    print $fh $a_token, "\n";
    print $fh $a_token_secret, "\n";
    close($fh);
}
